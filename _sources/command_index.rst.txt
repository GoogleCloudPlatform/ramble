
====================  =================================================================
 Category              Commands 
====================  =================================================================
Application dev       | :ref:`edit <ramble-edit>`
Query applications    | :ref:`info <ramble-info>`,
                        :ref:`list <ramble-list>`
Cleanup               | :ref:`clean <ramble-clean>`
Configuration         | :ref:`config <ramble-config>`,
                        :ref:`mirror <ramble-mirror>`,
                        :ref:`repo <ramble-repo>`
Developer             | :ref:`commands <ramble-commands>`,
                        :ref:`debug <ramble-debug>`,
                        :ref:`flake8 <ramble-flake8>`,
                        :ref:`license <ramble-license>`,
                        :ref:`unit-test <ramble-unit-test>`
More help             | :ref:`help <ramble-help>`
Secret                | :ref:`on <ramble-on>`
Workspaces            | :ref:`workspace <ramble-workspace>`
====================  =================================================================


----

.. _ramble:

ramble
------

A fleixble benchmark experiment manager.

.. code-block:: console

    ramble [-hHdklLmpvV] [--color {always,never,auto}] [-c CONFIG_VARS] [-C DIR] [--timestamp] [--pdb]
       [-w WRKSPC | -D DIR | -W] [--use-workspace-repo] [--sorted-profile STAT] [--lines LINES] [--stacktrace]
       [--print-shell-vars PRINT_SHELL_VARS]
       COMMAND ...


**Optional arguments**

``-h, --help``
  show this help message and exit

``-H, --all-help``
  show help for all commands (same as ramble help --all)

``--color {always,never,auto}``
  when to colorize output (default: auto)

``-c CONFIG_VARS, --config CONFIG_VARS``
  add one or more custom, one off config settings.

``-C DIR, --config-scope DIR``
  add a custom configuration scope

``-d, --debug``
  write out debug messages (more d's for more verbosity: -d, -dd, -ddd, etc.)

``--timestamp``
  Add a timestamp to tty output

``--pdb``
  run ramble under the pdb debugger

``-w WRKSPC, --workspace WRKSPC``
  run with a specific workspace (see ramble workspace)

``-D DIR, --workspace-dir DIR``
  run with a workspace directory (ignore named workspaces)

``-W, --no-workspace``
  run without any workspaces activated (see ramble workspace)

``--use-workspace-repo``
  when running in a workspace, use its application repository

``-k, --insecure``
  do not check ssl certificates when downloading

``-l, --enable-locks``
  use filesystem locking (default)

``-L, --disable-locks``
  do not use filesystem locking (unsafe)

``-m, --mock``
  use mock applications instead of real ones

``-p, --profile``
  profile execution using cProfile

``--sorted-profile STAT``
  profile and sort by one or more of: [calls, ncalls, cumtime, cumulative, filename, line, module]

``--lines LINES``
  lines of profile output or 'all' (default: 20)

``-v, --verbose``
  print additional output during builds

``--stacktrace``
  add stacktraces to all printed statements

``-V, --version``
  show version number and exit

``--print-shell-vars PRINT_SHELL_VARS``
  print info needed by setup-env.[c]sh


**Subcommands**

.. hlist::
   :columns: 4

   * :ref:`clean <ramble-clean>`
   * :ref:`commands <ramble-commands>`
   * :ref:`config <ramble-config>`
   * :ref:`debug <ramble-debug>`
   * :ref:`edit <ramble-edit>`
   * :ref:`flake8 <ramble-flake8>`
   * :ref:`help <ramble-help>`
   * :ref:`info <ramble-info>`
   * :ref:`license <ramble-license>`
   * :ref:`list <ramble-list>`
   * :ref:`mirror <ramble-mirror>`
   * :ref:`on <ramble-on>`
   * :ref:`repo <ramble-repo>`
   * :ref:`unit-test <ramble-unit-test>`
   * :ref:`workspace <ramble-workspace>`


----

.. _ramble-clean:

ramble clean
------------

remove temporary files and/or downloaded archives

.. code-block:: console

    ramble clean [-hdmpa]


**Optional arguments**

``-h, --help``
  show this help message and exit

``-d, --downloads``
  remove cached downloads (default)

``-m, --misc-cache``
  remove long-lived caches

``-p, --python-cache``
  remove .pyc, .pyo files and __pycache__ folders

``-a, --all``
  equivalent to -dmp


----

.. _ramble-commands:

ramble commands
---------------

list available ramble commands

.. code-block:: console

    ramble commands [-ha] [--update-completion] [--format {subcommands,rst,names,bash}] [--header FILE] [--update FILE]
                ...


**Positional arguments**

rst_files
  list of rst files to search for `_cmd-ramble-<cmd>` cross-refs


**Optional arguments**

``-h, --help``
  show this help message and exit

``--update-completion``
  regenerate ramble's tab completion scripts

``-a, --aliases``
  include command aliases

``--format {subcommands,rst,names,bash}``
  format to be used to print the output (default: names)

``--header FILE``
  prepend contents of FILE to the output (useful for rst format)

``--update FILE``
  write output to the specified file, if any command is newer


----

.. _ramble-config:

ramble config
-------------

get and set configuration options

.. code-block:: console

    ramble config [-h] [--scope {defaults,system,site,user}] SUBCOMMAND ...


**Optional arguments**

``-h, --help``
  show this help message and exit

``--scope {defaults,system,site,user}``
  configuration scope to read/modify


**Subcommands**

.. hlist::
   :columns: 4

   * :ref:`config get <ramble-config-get>`
   * :ref:`config blame <ramble-config-blame>`
   * :ref:`config edit <ramble-config-edit>`
   * :ref:`config list <ramble-config-list>`
   * :ref:`config add <ramble-config-add>`
   * :ref:`config remove <ramble-config-remove>`
   * :ref:`config update <ramble-config-update>`
   * :ref:`config revert <ramble-config-revert>`


----

.. _ramble-config-get:

ramble config get
^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config get [-h] [section]


**Positional arguments**

section
  configuration section to print. options: config, env_vars, repos, licenses, mirrors, spack, success_criteria, applications, variables


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-config-blame:

ramble config blame
^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config blame [-h] section


**Positional arguments**

section
  configuration section to print. options: config, env_vars, repos, licenses, mirrors, spack, success_criteria, applications, variables


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-config-edit:

ramble config edit
^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config edit [-h] [--print-file] [section]


**Positional arguments**

section
  configuration section to edit. options: config, env_vars, repos, licenses, mirrors, spack, success_criteria, applications, variables


**Optional arguments**

``-h, --help``
  show this help message and exit

``--print-file``
  print the file name that would be edited


----

.. _ramble-config-list:

ramble config list
^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config list [-h]


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-config-add:

ramble config add
^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config add [-h] [-f FILE] [path]


**Positional arguments**

path
  colon-separated path to config that should be added, e.g. 'config:default:true'


**Optional arguments**

``-h, --help``
  show this help message and exit

``-f FILE, --file FILE``
  file from which to set all config values


----

.. _ramble-config-remove:

ramble config remove
^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config remove [-h] path


**Positional arguments**

path
  colon-separated path to config that should be removed, e.g. 'config:default:true'


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-config-update:

ramble config update
^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config update [-hy] section


**Positional arguments**

section
  section to update


**Optional arguments**

``-h, --help``
  show this help message and exit

``-y, --yes-to-all``
  assume "yes" is the answer to every confirmation request


----

.. _ramble-config-revert:

ramble config revert
^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble config revert [-hy] section


**Positional arguments**

section
  section to update


**Optional arguments**

``-h, --help``
  show this help message and exit

``-y, --yes-to-all``
  assume "yes" is the answer to every confirmation request


----

.. _ramble-debug:

ramble debug
------------

debugging commands for troubleshooting Ramble

.. code-block:: console

    ramble debug [-h] SUBCOMMAND ...


**Optional arguments**

``-h, --help``
  show this help message and exit


**Subcommands**

.. hlist::
   :columns: 4

   * :ref:`debug report <ramble-debug-report>`


----

.. _ramble-debug-report:

ramble debug report
^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble debug report [-h]


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-edit:

ramble edit
-----------

open application files in $EDITOR

.. code-block:: console

    ramble edit [-h] [-a | -c | -d | -t | -m | -r REPO | -N NAMESPACE] [application]


**Positional arguments**

application
  application name


**Optional arguments**

``-h, --help``
  show this help message and exit

``-a, --application-type``
  Edit the application type with the supplied name.

``-c, --command``
  edit the command with the supplied name

``-d, --docs``
  edit the docs with the supplied name

``-t, --test``
  edit the test with the supplied name

``-m, --module``
  edit the main ramble module with the supplied name

``-r REPO, --repo REPO``
  path to repo to edit application in

``-N NAMESPACE, --namespace NAMESPACE``
  namespace of package to edit


----

.. _ramble-flake8:

ramble flake8
-------------

runs source code style checks on Ramble. requires flake8

.. code-block:: console

    ramble flake8 [-hkaorU] [-b BASE] ...


**Positional arguments**

files
  specific files to check


**Optional arguments**

``-h, --help``
  show this help message and exit

``-b BASE, --base BASE``
  select base branch for collecting list of modified files

``-k, --keep-temp``
  do not delete temporary directory where flake8 runs. use for debugging, to see filtered files

``-a, --all``
  check all files, not just changed files

``-o, --output``
  send filtered files to stdout as well as temp files

``-r, --root-relative``
  print root-relative paths (default: cwd-relative)

``-U, --no-untracked``
  exclude untracked files from checks


----

.. _ramble-help:

ramble help
-----------

get help on ramble and its commands

.. code-block:: console

    ramble help [-ha] [--spec help_command]


**Positional arguments**

help_command
  command to get help on


**Optional arguments**

``-h, --help``
  show this help message and exit

``-a, --all``
  list all available commands and options

``--spec``
  help on the package specification syntax


----

.. _ramble-info:

ramble info
-----------

get detailed information on a particular application

.. code-block:: console

    ramble info [-h] application


**Positional arguments**

application
  application name


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-license:

ramble license
--------------

list and check license headers on files in ramble

.. code-block:: console

    ramble license [-h] SUBCOMMAND ...


**Optional arguments**

``-h, --help``
  show this help message and exit


**Subcommands**

.. hlist::
   :columns: 4

   * :ref:`license list-files <ramble-license-list-files>`
   * :ref:`license verify <ramble-license-verify>`


----

.. _ramble-license-list-files:

ramble license list-files
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble license list-files [-h]


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-license-verify:

ramble license verify
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble license verify [-h] [--root ROOT]


**Optional arguments**

``-h, --help``
  show this help message and exit

``--root ROOT``
  scan a different prefix for license issues


----

.. _ramble-list:

ramble list
-----------

list and search available applications

.. code-block:: console

    ramble list [-hd] [--format {name_only,version_json,html}] [--update FILE] [-t TAGS] ...


**Positional arguments**

filter
  optional case-insensitive glob patterns to filter results


**Optional arguments**

``-h, --help``
  show this help message and exit

``-d, --search-description``
  filtering will also search the description for a match

``--format {name_only,version_json,html}``
  format to be used to print the output [default: name_only]

``--update FILE``
  write output to the specified file, if any application is newer

``-t TAGS, --tags TAGS``
  filter a package query by tags


----

.. _ramble-mirror:

ramble mirror
-------------

manage mirrors (inputs)

.. code-block:: console

    ramble mirror [-hn] SUBCOMMAND ...


**Optional arguments**

``-h, --help``
  show this help message and exit

``-n, --no-checksum``
  do not use checksums to verify downloaded files (unsafe)


**Subcommands**

.. hlist::
   :columns: 4

   * :ref:`mirror destroy <ramble-mirror-destroy>`
   * :ref:`mirror add <ramble-mirror-add>`
   * :ref:`mirror remove <ramble-mirror-remove>`
   * :ref:`mirror set-url <ramble-mirror-set-url>`
   * :ref:`mirror list <ramble-mirror-list>`


----

.. _ramble-mirror-destroy:

ramble mirror destroy
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble mirror destroy [-h] (-m mirror_name | -u mirror_url)


**Optional arguments**

``-h, --help``
  show this help message and exit

``-m mirror_name, --mirror-name mirror_name``
  find mirror to destroy by name

``-u mirror_url, --mirror-url mirror_url``
  find mirror to destroy by url


----

.. _ramble-mirror-add:

ramble mirror add
^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble mirror add [-h] [--scope {defaults,system,site,user}] mirror url


**Positional arguments**

mirror
  mnemonic name for mirror

url
  url of mirror directory from 'ramble mirror create'


**Optional arguments**

``-h, --help``
  show this help message and exit

``--scope {defaults,system,site,user}``
  configuration scope to modify


----

.. _ramble-mirror-remove:

ramble mirror remove
^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble mirror remove [-h] [--scope {defaults,system,site,user}] mirror


**Positional arguments**

mirror
  mnemonic name for mirror


**Optional arguments**

``-h, --help``
  show this help message and exit

``--scope {defaults,system,site,user}``
  configuration scope to modify


----

.. _ramble-mirror-set-url:

ramble mirror set-url
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble mirror set-url [-h] [--push] [--scope {defaults,system,site,user}] mirror url


**Positional arguments**

mirror
  mnemonic name for mirror

url
  url of mirror directory from 'ramble mirror create'


**Optional arguments**

``-h, --help``
  show this help message and exit

``--push``
  set only the URL used for uploading new resources

``--scope {defaults,system,site,user}``
  configuration scope to modify


----

.. _ramble-mirror-list:

ramble mirror list
^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble mirror list [-h] [--scope {defaults,system,site,user}]


**Optional arguments**

``-h, --help``
  show this help message and exit

``--scope {defaults,system,site,user}``
  configuration scope to read from


----

.. _ramble-on:

ramble on
---------

And now's the time, the time is now

.. code-block:: console

    ramble on [-h] [-w workspace]


**Optional arguments**

``-h, --help``
  show this help message and exit

``-w workspace, --workspace workspace``
  name of workspace to `ramble on`


----

.. _ramble-repo:

ramble repo
-----------

manage application repositories

.. code-block:: console

    ramble repo [-h] SUBCOMMAND ...


**Optional arguments**

``-h, --help``
  show this help message and exit


**Subcommands**

.. hlist::
   :columns: 4

   * :ref:`repo create <ramble-repo-create>`
   * :ref:`repo list <ramble-repo-list>`
   * :ref:`repo add <ramble-repo-add>`
   * :ref:`repo remove <ramble-repo-remove>`


----

.. _ramble-repo-create:

ramble repo create
^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble repo create [-h] [-d SUBDIRECTORY] directory [namespace]


**Positional arguments**

directory
  directory to create the repo in

namespace
  namespace to identify applications in the repository. defaults to the directory name


**Optional arguments**

``-h, --help``
  show this help message and exit

``-d SUBDIRECTORY, --subdirectory SUBDIRECTORY``
  subdirectory to store applications in the repository. Default 'applications'. Use an empty string for no subdirectory.


----

.. _ramble-repo-list:

ramble repo list
^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble repo list [-h] [--scope {defaults,system,site,user}]


**Optional arguments**

``-h, --help``
  show this help message and exit

``--scope {defaults,system,site,user}``
  configuration scope to read from


----

.. _ramble-repo-add:

ramble repo add
^^^^^^^^^^^^^^^

.. code-block:: console

    ramble repo add [-h] [--scope {defaults,system,site,user}] path


**Positional arguments**

path
  path to a Ramble application repository directory


**Optional arguments**

``-h, --help``
  show this help message and exit

``--scope {defaults,system,site,user}``
  configuration scope to modify


----

.. _ramble-repo-remove:

ramble repo remove
^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble repo remove [-h] [--scope {defaults,system,site,user}] namespace_or_path


**Positional arguments**

namespace_or_path
  namespace or path of a Ramble application repository


**Optional arguments**

``-h, --help``
  show this help message and exit

``--scope {defaults,system,site,user}``
  configuration scope to modify


----

.. _ramble-unit-test:

ramble unit-test
----------------

run ramble's unit tests (wrapper around pytest)

.. code-block:: console

    ramble unit-test [-hHs] [-l | -L | -N] [--extension EXTENSION] [-k EXPRESSION] [--showlocals] ...


**Positional arguments**

pytest_args
  arguments for pytest


**Optional arguments**

``-h, --help``
  show this help message and exit

``-H, --pytest-help``
  show full pytest help, with advanced options

``-l, --list``
  list test filenames

``-L, --list-long``
  list all test functions

``-N, --list-names``
  list full names of all tests

``--extension EXTENSION``
  run test for a given ramble extension

``-s``
  print output while tests run (disable capture)

``-k EXPRESSION``
  filter tests by keyword (can also use w/list options)

``--showlocals``
  show local variable values in tracebacks


----

.. _ramble-workspace:

ramble workspace
----------------

manage experiment workspaces

.. code-block:: console

    ramble workspace [-h] SUBCOMMAND ...


**Optional arguments**

``-h, --help``
  show this help message and exit


**Subcommands**

.. hlist::
   :columns: 4

   * :ref:`workspace activate <ramble-workspace-activate>`
   * :ref:`workspace archive <ramble-workspace-archive>`
   * :ref:`workspace deactivate <ramble-workspace-deactivate>`
   * :ref:`workspace create <ramble-workspace-create>`
   * :ref:`workspace concretize <ramble-workspace-concretize>`
   * :ref:`workspace setup <ramble-workspace-setup>`
   * :ref:`workspace analyze <ramble-workspace-analyze>`
   * :ref:`workspace info <ramble-workspace-info>`
   * :ref:`workspace edit <ramble-workspace-edit>`
   * :ref:`workspace mirror <ramble-workspace-mirror>`
   * :ref:`workspace list <ramble-workspace-list>`
   * :ref:`workspace remove <ramble-workspace-remove>`


----

.. _ramble-workspace-activate:

ramble workspace activate
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace activate [-hp] [--sh | --csh | --fish | --bat] [--temp | -d DIR | workspace]


**Positional arguments**

workspace
  name of workspace to activate


**Optional arguments**

``-h, --help``
  show this help message and exit

``--sh``
  print sh commands to activate the workspace

``--csh``
  print csh commands to activate the workspace

``--fish``
  print fish commands to activate the workspace

``--bat``
  print bat commands to activate the environment

``-p, --prompt``
  decorate the command line prompt when activating

``--temp``
  create and activate a workspace in a temporary directory

``-d DIR, --dir DIR``
  activate the workspace in this directory


----

.. _ramble-workspace-archive:

ramble workspace archive
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace archive [-h] [--tar-archive] [--upload-url UPLOAD_URL]


**Optional arguments**

``-h, --help``
  show this help message and exit

``--tar-archive, -t``
  create a tar.gz of the archive directory for backing up.

``--upload-url UPLOAD_URL, -u UPLOAD_URL``
  URL to upload tar archive into. Does nothing if `-t` is not specified.


----

.. _ramble-workspace-deactivate:

ramble workspace deactivate
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace deactivate [-h] [--sh | --csh | --fish | --bat]


**Optional arguments**

``-h, --help``
  show this help message and exit

``--sh``
  print sh commands to deactivate the workspace

``--csh``
  print csh commands to deactivate the workspace

``--fish``
  print fish commands to activate the workspace

``--bat``
  print bat commands to activate the environment


----

.. _ramble-workspace-create:

ramble workspace create
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace create [-hd] [-c CONFIG] [-t TEMPLATE_EXECUTE] wrkspc


**Positional arguments**

wrkspc
  name of workspace to create


**Optional arguments**

``-h, --help``
  show this help message and exit

``-c CONFIG, --config CONFIG``
  configuration file to create workspace with

``-t TEMPLATE_EXECUTE, --template_execute TEMPLATE_EXECUTE``
  execution template file to use when creating workspace

``-d, --dir``
  create a workspace in a specific directory


----

.. _ramble-workspace-concretize:

ramble workspace concretize
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace concretize [-h]


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-workspace-setup:

ramble workspace setup
^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace setup [-h] [--dry-run]


**Optional arguments**

``-h, --help``
  show this help message and exit

``--dry-run``
  perform a dry run. Sets up directories and generates all scripts. Prints commands that would be executed for installation, and files that would be downloaded.


----

.. _ramble-workspace-analyze:

ramble workspace analyze
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace analyze [-hu] [-f OUTPUT_FORMATS [OUTPUT_FORMATS ...]]


**Optional arguments**

``-h, --help``
  show this help message and exit

``-f OUTPUT_FORMATS [OUTPUT_FORMATS ...], --formats OUTPUT_FORMATS [OUTPUT_FORMATS ...]``
  list of output formats to write.Supported formats are json, yaml, or text

``-u, --upload``
  Push experiment data to remote store (as defined in config)


----

.. _ramble-workspace-info:

ramble workspace info
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace info [-hv]


**Optional arguments**

``-h, --help``
  show this help message and exit

``-v, --verbose``
  level of verbosity. Add flags to increase description of workspace


----

.. _ramble-workspace-edit:

ramble workspace edit
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace edit [-hctp]


**Optional arguments**

``-h, --help``
  show this help message and exit

``-c, --config_only``
  Only open config files

``-t, --template_only``
  Only open template files

``-p, --print-file``
  print the file name that would be edited


----

.. _ramble-workspace-mirror:

ramble workspace mirror
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace mirror [-h] [-d MIRROR_PATH] [--dry-run]


**Optional arguments**

``-h, --help``
  show this help message and exit

``-d MIRROR_PATH``
  Path to create mirror in.

``--dry-run``
  perform a dry run. Creates spack environments, prints commands that would be executed for installation, and files that would be downloaded.


----

.. _ramble-workspace-list:

ramble workspace list
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace list [-h]


**Optional arguments**

``-h, --help``
  show this help message and exit


----

.. _ramble-workspace-remove:

ramble workspace remove
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: console

    ramble workspace remove [-hy] wrkspc [wrkspc ...]


**Positional arguments**

wrkspc
  workspace(s) to remove


**Optional arguments**

``-h, --help``
  show this help message and exit

``-y, --yes-to-all``
  assume "yes" is the answer to every confirmation request

